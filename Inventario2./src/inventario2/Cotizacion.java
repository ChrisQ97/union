/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventario2;

import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import static jdk.nashorn.internal.runtime.Debug.id;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author sys515
 */
public class Cotizacion extends javax.swing.JFrame {
    
    Conexion con = new Conexion();
    Connection Consulta = con.conexion();
    Connection Insertar = con.conexion();
    String nitglobal=null;
    DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }; 
//para la tabla
    /**
     * Creates new form Cotizacion
     */
    public Cotizacion() {
        initComponents();
        Cantidad.setText("");
        

        AutoCompleteDecorator.decorate(Producto);
        AutoCompleteDecorator.decorate(Nit);

        modelo.setRowCount(0);
        modelo.addColumn("Cantidad");//0
        modelo.addColumn("Nombre");//1
        modelo.addColumn("Marca");//2
        modelo.addColumn("Precio Producto");//3
        modelo.addColumn("Precio Unitario");//4
        Factura.setModel(modelo);
        this.setResizable(false);
        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT Codigo FROM Producto");
            while (Ca.next()) {

                Producto.addItem(Ca.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT Nit FROM Cliente");
            while (Ca.next()) {

                Nit.addItem(Ca.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);
        }
        Factura.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent Mouse_evt) {
                JTable table = (JTable) Mouse_evt.getSource();
                Point point = Mouse_evt.getPoint();
                int row = table.rowAtPoint(point);
                if (Mouse_evt.getClickCount() == 2) {
                    int e=ext(String.valueOf(Factura.getValueAt(Factura.getSelectedRow(), 1)),
                            String.valueOf(Factura.getValueAt(Factura.getSelectedRow(), 2)));
                    String mensaje=mensaje(String.valueOf(Factura.getValueAt(Factura.getSelectedRow(), 0)));
                    
                    if(Integer.parseInt(mensaje)>e)
                    {
                         JOptionPane.showMessageDialog(null, "Excede La existencia");

                    }
                    else
                    {
                        Double x=(Double.parseDouble(String.valueOf(Factura.getValueAt(Factura.getSelectedRow(), 4))))*Double.parseDouble(mensaje);
                        Factura.setValueAt(mensaje, row, 0);
                        Factura.setValueAt(String.valueOf(x), row, 3);
                    }
                 
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Factura = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Producto = new javax.swing.JComboBox<>();
        NombrePM = new javax.swing.JLabel();
        MarcaM = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        NombreP = new javax.swing.JLabel();
        Marca = new javax.swing.JLabel();
        Existencia = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        NombreM = new javax.swing.JLabel();
        N = new javax.swing.JLabel();
        ApellidoM = new javax.swing.JLabel();
        NY = new javax.swing.JLabel();
        addcli = new javax.swing.JButton();
        actualizar = new javax.swing.JButton();
        Nit = new javax.swing.JComboBox<>();
        Totales = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Cantidad = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        addfila = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Factura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cantidad", "Nombre", "Marca", "Precio Producto", "Precio Unitario"
            }
        ));
        Factura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FacturaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(Factura);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 560, 270));

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Codigo");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Producto");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 29, -1, -1));

        Producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductoActionPerformed(evt);
            }
        });
        getContentPane().add(Producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 52, 121, -1));

        NombrePM.setForeground(new java.awt.Color(255, 255, 255));
        NombrePM.setText("Nombre");
        getContentPane().add(NombrePM, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 104, -1, -1));

        MarcaM.setForeground(new java.awt.Color(255, 255, 255));
        MarcaM.setText("Marca");
        getContentPane().add(MarcaM, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 139, 55, -1));

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Existencia");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 174, -1, -1));

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Cantidad");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 227, -1, -1));

        NombreP.setForeground(new java.awt.Color(255, 255, 255));
        NombreP.setText("Nombre");
        getContentPane().add(NombreP, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 104, -1, -1));

        Marca.setForeground(new java.awt.Color(255, 255, 255));
        Marca.setText("Marca");
        getContentPane().add(Marca, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 139, -1, -1));

        Existencia.setForeground(new java.awt.Color(255, 255, 255));
        Existencia.setText("Existencia");
        getContentPane().add(Existencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 174, -1, -1));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Cliente");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, -1, -1));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Nit");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 80, -1, -1));

        NombreM.setForeground(new java.awt.Color(255, 255, 255));
        NombreM.setText("Nombre");
        getContentPane().add(NombreM, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, -1, -1));

        N.setForeground(new java.awt.Color(255, 255, 255));
        N.setText("Nombre");
        getContentPane().add(N, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, -1, -1));

        ApellidoM.setForeground(new java.awt.Color(255, 255, 255));
        ApellidoM.setText("Apellido");
        getContentPane().add(ApellidoM, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, -1, -1));

        NY.setForeground(new java.awt.Color(255, 255, 255));
        NY.setText("Apellido");
        getContentPane().add(NY, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 140, -1, -1));

        addcli.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconoso/icons8-agregar-administrador-50.png"))); // NOI18N
        addcli.setToolTipText("Agregar Cliente Nuevo");
        addcli.setBorderPainted(false);
        addcli.setContentAreaFilled(false);
        addcli.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/iconoso/icons8-agregar-administrador-filled-50(1).png"))); // NOI18N
        addcli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addcliActionPerformed(evt);
            }
        });
        getContentPane().add(addcli, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 50, 80, 70));

        actualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconoso/icons8-actualizar-50.png"))); // NOI18N
        actualizar.setToolTipText("Actualizar");
        actualizar.setBorderPainted(false);
        actualizar.setContentAreaFilled(false);
        actualizar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/iconoso/icons8-actualizar-filled-50.png"))); // NOI18N
        actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarActionPerformed(evt);
            }
        });
        getContentPane().add(actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 120, 50, 50));

        Nit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NitActionPerformed(evt);
            }
        });
        getContentPane().add(Nit, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 70, 146, -1));

        Totales.setForeground(new java.awt.Color(255, 255, 255));
        Totales.setText("0000");
        getContentPane().add(Totales, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 230, -1, -1));

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Total");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 230, -1, -1));

        Cantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CantidadKeyTyped(evt);
            }
        });
        getContentPane().add(Cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 219, 70, -1));

        jButton1.setText("Generar Cotizacion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 453, -1, -1));

        jPanel1.setBackground(new java.awt.Color(17, 111, 172));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addfila.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconoso/icons8-más-2-matemáticas-50.png"))); // NOI18N
        addfila.setContentAreaFilled(false);
        addfila.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/iconoso/icons8-más-2-matemáticas-filled-50.png"))); // NOI18N
        addfila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addfilaActionPerformed(evt);
            }
        });
        jPanel1.add(addfila, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 50, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FacturaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FacturaKeyTyped
        
    }//GEN-LAST:event_FacturaKeyTyped
     private String mensaje(String x)
    {
        int numero=0;
        try
        {
        
            numero=Integer.parseInt(javax.swing.JOptionPane.showInputDialog("introduce numero"));
            return String.valueOf(numero);
        }
        catch(NumberFormatException e)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Solo se permiten numeros");
 
        }
        return x;
    }
    private int ext(String N,String M)
    {
         try {
            int y=0;
            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT Existencia FROM Producto Where Nombre='" +N + "' && Marca='"+M+"'");
            while (Ca.next()) {
                y=Integer.parseInt(Ca.getString(1));
                
            }
            return y;
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }
    private void ProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductoActionPerformed
        String Completo = (String) Producto.getSelectedItem();
        llenarPM(Completo);
     
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductoActionPerformed

    private void llenarPM(String Codigo) {

        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT Nombre,Marca,Existencia FROM Producto Where Codigo='" + Codigo + "'");
            while (Ca.next()) {

                NombreP.setText(Ca.getString(1));
                Marca.setText(Ca.getString(2));
                Existencia.setText(Ca.getString(3));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     private Boolean CompararEntrada(String Nombre,String Marca)
    {
        
        String x[] = new String[2];
        if(Factura.getRowCount()!=0)
        {
        for (int i = 0; i < Factura.getRowCount(); i++)
        {
            
                x[0] = Factura.getValueAt(i, 1).toString().trim();
                x[1] = Factura.getValueAt(i, 2).toString().trim();
                if(x[0].equals(Nombre)&& x[1].equals(Marca))
                {
                    return false;
                }
               
                
           
        }
        }
        else{
            return true;

        }
        return true;
        
    }
     private int CuantosLotes(String Codigo) {
        int cantidad = 0;
        int NoLotes = 0;
        cantidad = Integer.parseInt(Cantidad.getText());

        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT Cantidad FROM Lote  where Producto_id='" + Codigo + "' ORDER BY Fecha ASC");
            while (Ca.next()) {
                if (cantidad > 0) {
                    cantidad = cantidad - Integer.parseInt(Ca.getString(1));
                    NoLotes++;

                }
            }
            return NoLotes;
        } catch (SQLException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }
     private String Facturacion(int x, String Codigo) {
        BigDecimal cantidad = BigDecimal.valueOf(0.0);
        cantidad = BigDecimal.valueOf(Double.parseDouble(Cantidad.getText()));
        BigDecimal PrecioTotal = BigDecimal.valueOf(0.0);
        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT Cantidad,PrecioUnitario FROM Lote  where Producto_id='" + Codigo + "' ORDER BY Fecha ASC Limit " + x + "");
            while (Ca.next()) {
                if (x == 1) {
                    PrecioTotal = PrecioTotal.add(BigDecimal.valueOf(Double.parseDouble(Cantidad.getText())).multiply(BigDecimal.valueOf( Double.parseDouble(Ca.getString(2))))).setScale(2, BigDecimal.ROUND_DOWN);
                } else {
                    if (Double.parseDouble(String.valueOf(cantidad)) < Double.parseDouble(Ca.getString(1))) {

                        PrecioTotal = PrecioTotal.add(cantidad.multiply(BigDecimal.valueOf(Double.parseDouble(Ca.getString(2))))).setScale(2, BigDecimal.ROUND_DOWN);                                ;

                    }
                    if (Double.parseDouble(String.valueOf(cantidad)) == Double.parseDouble(Ca.getString(1))) {

                        PrecioTotal = PrecioTotal.add(BigDecimal.valueOf(Double.parseDouble(Ca.getString(1))).multiply(BigDecimal.valueOf(Double.parseDouble(Ca.getString(2))))).setScale(2, BigDecimal.ROUND_DOWN); 
                                
                    }
                    if (Double.parseDouble(String.valueOf(cantidad)) > Double.parseDouble(Ca.getString(1))) {

                        cantidad = cantidad.subtract(BigDecimal.valueOf(Double.parseDouble(Ca.getString(1)))).setScale(2, BigDecimal.ROUND_DOWN);
                        PrecioTotal = PrecioTotal.add((BigDecimal.valueOf(Double.parseDouble(Ca.getString(1))).multiply(BigDecimal.valueOf(Double.parseDouble(Ca.getString(2)))))).setScale(2, BigDecimal.ROUND_DOWN);;
                                

                    }

                }
            }
            return String.valueOf(PrecioTotal);
        } catch (SQLException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Precio Total " + PrecioTotal);
        return null;

    }
     private String id(String Codigo) {
        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT id FROM Producto Where Codigo='" + Codigo + "'");
            while (Ca.next()) {

                return Ca.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    private void addfilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addfilaActionPerformed

        if (Cantidad.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese la Cantidad que desea comprar de: " + NombreP.getText());

        } else {
            if(CompararEntrada(NombreP.getText(),Marca.getText())==false){
                JOptionPane.showMessageDialog(null, "Ya tiene este Producto Registrdo en la Factura");

            }
            else{
                if (Integer.parseInt(Cantidad.getText()) <= Integer.parseInt(Existencia.getText())) {
                    String Completo = (String) Producto.getSelectedItem();
                    String Fact=Facturacion(CuantosLotes(id(Completo)), id(Completo));
                Double r=Double.parseDouble(Fact);
                Double PrecioUnita=r/(Double.parseDouble(Cantidad.getText()));
                BigDecimal PrecioUnitar=BigDecimal.valueOf(PrecioUnita).setScale(2, BigDecimal.ROUND_UP);
                
                    modelo.addRow(new Object[]{Cantidad.getText(), NombreP.getText(), Marca.getText(),
                        Facturacion(CuantosLotes(id(Completo)), id(Completo)), PrecioUnitar});
                BigDecimal To = BigDecimal.valueOf(Double.parseDouble(Totales.getText())).add(BigDecimal.valueOf(Double.parseDouble(Facturacion(CuantosLotes(id(Completo)), id(Completo))))).setScale(2, BigDecimal.ROUND_DOWN);
                Totales.setText(String.valueOf(To));
            } else {
                JOptionPane.showMessageDialog(null, "No se puede");

            }
        }
        }
        Cantidad.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_addfilaActionPerformed

    private void addcliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addcliActionPerformed
        // TODO add your handling code here:
        Clientes cl = new Clientes();
        cl.setVisible(true);
    }//GEN-LAST:event_addcliActionPerformed

    private void actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarActionPerformed
        // TODO add your handling code here:

        Nit.removeAllItems();
        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT Nit,id FROM Cliente");
            while (Ca.next()) {

                Nit.addItem(Ca.getString(1));
            }
            Ca.close();
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_actualizarActionPerformed

    private void NitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NitActionPerformed
        nitglobal = (String) Nit.getSelectedItem();
        String Completo = (String) Nit.getSelectedItem();
        llenarCl(Completo);
    }//GEN-LAST:event_NitActionPerformed

      private void llenarCl(String Codigo) {

        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT NombreC,Apellido FROM Cliente Where Nit='" + Codigo + "'");
            while (Ca.next()) {

                N.setText(Ca.getString(1));
                NY.setText(Ca.getString(2));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void CantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CantidadKeyTyped
        int k = (int) evt.getKeyChar();
        if (k >= 97 && k <= 122 || k >= 65 && k <= 90) {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            JOptionPane.showMessageDialog(null, "No puede ingresar letras!!!", "Ventana Error Datos", JOptionPane.ERROR_MESSAGE);
        }
        if (k == 241 || k == 209) {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            JOptionPane.showMessageDialog(null, "No puede ingresar letras!!!", "Ventana Error Datos", JOptionPane.ERROR_MESSAGE);
        }
        if (k >= 33 && k <= 47) {
            evt.setKeyChar((char) KeyEvent.VK_CLEAR);
            JOptionPane.showMessageDialog(null, "No puede ingresar Simbolos!!!", "Ventana Error Datos", JOptionPane.ERROR_MESSAGE);
        }
        if (k == 10) {
            Cantidad.transferFocus();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_CantidadKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
    
        String idC=GC("1");
        String x[]=new String[5];
        for (int i = 0; i < Factura.getRowCount(); i++) {
                for (int j = 0; j < Factura.getColumnCount(); j++) {
                    x[j] = Factura.getValueAt(i, j).toString().trim();

                }
                CrearLoteC(idC, x, id2(x[1], x[2]));

                

                
          }
    
    //imprimir();
    // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    private void imprimir()
    {
                try {
            Connection tr = con.conexion();
            JasperReport reporte= null;
            String path="/home/sys515/Documentos/ProyecoPEPS/Inventario2-master/Inventario2./src/Reportes/ventas.jasper";
            reporte= (JasperReport) JRLoader.loadObjectFromFile(path);
            JasperPrint jprint =JasperFillManager.fillReport(reporte,null,tr);
            JasperViewer view = new JasperViewer(jprint,false);
            view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            view.setVisible(true);

            // TODO add your handling code here:
        } catch (JRException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }
    private int CuantosLotes2(String id,String n) {
        int cantidad = 0;
        int NoLotes = 0;
        cantidad = Integer.parseInt(n);

        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT Cantidad FROM Lote  where Producto_id='" + id + "' ORDER BY Fecha ASC");
            while (Ca.next()) {
                if (cantidad > 0) {
                    cantidad = cantidad - Integer.parseInt(Ca.getString(1));
                    NoLotes++;

                }
            }
            return NoLotes;
        } catch (SQLException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }   
    private void CrearLoteC(String idF, String ve[], String idP) {

        try {
                    PreparedStatement CrearLot = Insertar.prepareStatement("INSERT INTO Lote_Coti(Cantidad,PrecioUnitario,PrecioTotal,Descripcion,Producto_id,Cotizacion_id,Fecha) "
                            + "VALUES(?,?,?,?,?,?,now())");
                    
                    
                    CrearLot.setString(1, ve[0]);
                    CrearLot.setString(2, ve[4]);
                    CrearLot.setString(3, ve[3]);
                    CrearLot.setString(4, "");
                    CrearLot.setString(5, idP);
                    CrearLot.setString(6, idF);
                    
                    CrearLot.executeUpdate();
                    CrearLot.close();
                   

        } catch (SQLException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private String id2(String Nombre, String Marca) {
        try {

            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT id FROM Producto Where Nombre='" + Nombre + "'&& Marca='" + Marca + "'");
            while (Ca.next()) {

                return Ca.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }   
    private int getidProve(String nit) {
        int nit2 = 0;
        try {
            Statement sx = Consulta.createStatement();
            ResultSet Ca = sx.executeQuery("SELECT id FROM Cliente WHERE Nit='" + nit + "'");
            while (Ca.next()) {
                nit2 = Integer.parseInt(Ca.getString(1));

            }
            return nit2;
        } catch (SQLException ex) {
            Logger.getLogger(Compras.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }
    private String GC(String Numero)
    {
                int idUsuario = 0;

        try {
                PreparedStatement CrearLot = Consulta.prepareStatement("INSERT INTO Cotizacion(Numero,Cliente_id,Fecha"
                    + ") VALUES(?,?,now())", Statement.RETURN_GENERATED_KEYS);
                CrearLot.setString(1, Numero);
                CrearLot.setString(2, String.valueOf(getidProve(nitglobal)));
                CrearLot.executeUpdate();
                try (ResultSet rs = CrearLot.getGeneratedKeys()) {
                if (!rs.next()) {
                    throw new RuntimeException("no devolvió el ID");
                }

                idUsuario = rs.getInt(1);
                CrearLot.close();

            }
                            return String.valueOf(idUsuario);

        } catch (SQLException ex) {
            Logger.getLogger(Cotizacion.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        return null;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cotizacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ApellidoM;
    private javax.swing.JTextField Cantidad;
    private javax.swing.JLabel Existencia;
    private javax.swing.JTable Factura;
    private javax.swing.JLabel Marca;
    private javax.swing.JLabel MarcaM;
    private javax.swing.JLabel N;
    private javax.swing.JLabel NY;
    private javax.swing.JComboBox<String> Nit;
    private javax.swing.JLabel NombreM;
    private javax.swing.JLabel NombreP;
    private javax.swing.JLabel NombrePM;
    private javax.swing.JComboBox<String> Producto;
    private javax.swing.JLabel Totales;
    private javax.swing.JButton actualizar;
    private javax.swing.JButton addcli;
    private javax.swing.JButton addfila;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
